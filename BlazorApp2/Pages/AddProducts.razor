@page "/add-products"
@inject HttpClient Http
@inject BlazorApp2.Services.ApiServices apiServices
@inject IJSRuntime JSRuntime
@using ModelsClassLibrary.Models
@using System.ComponentModel

<PageTitle>Add Products</PageTitle>

<div class="container">
    <div class="row">
        <div class="position-relative">
            <EditForm Model="@product" OnValidSubmit="@SaveProduct">
                <DataAnnotationsValidator />

                <div class="col-12 row">
                    <label class="col-4 font-weight-bold">Product name :</label>
                    <input @ref="firstInputElement" class="form-control col-3" @bind="product.ProductName" placeholder="product name" />
                    <ValidationMessage For="@(() => product.ProductName)" />
                </div>
                <br />
                <div class="col-12 row">
                    <label class="col-4 font-weight-bold">Description :</label>
                    <InputText class="form-control col-3" @bind-Value="product.Description" placeholder="Description" />
                    <ValidationMessage For="@(() => product.Description)" />
                </div>
                <br />
                <div class="col-12 row">
                    <label class="col-4 font-weight-bold form-label">Category :</label>
                    <InputSelect class="form-control col-3" @bind-Value="product.Category">
                        <option value="-1" selected>Select Category</option>
                        @foreach (CategoryEnum category in categoryEnums)
                        {
                            <option value="@(category)">@product.ConvertCategory(category.ToString())</option>
                        }
                    </InputSelect>
                </div>
                <br />
                <div class="col-12 row">
                    <label class="col-4 font-weight-bold">Base Price :</label>
                    <InputNumber class="form-control col-3" @bind-Value="product.BasePrice" placeholder="Base Price" />
                    <ValidationMessage For="@(() => product.BasePrice)" />
                </div>
                <br />
                <div class="col-12 row">
                    <label class="col-4 font-weight-bold">Discount in % :</label>
                    <InputNumber class="form-control col-3" @bind-Value="product.Offer" placeholder="Discount" />
                    <ValidationMessage For="@(() => product.Offer)" />
                </div>
                <br />
                <div class="col-12 row">
                    <input type="submit" class="col-2 btn btn-primary mx-1" value="Save" />
                    <input type="reset" class="col-2 btn btn-primary mx-1" value="Clear" />
                </div>
            </EditForm>
        </div>
        @if (!string.IsNullOrEmpty(succesMessage))
        {
            <div class="position-absolute end-0 bottom-0 w-50 d-flex justify-content-end m-4">

                <div class="alert-success w-50 p-3 toster">@succesMessage</div>

            </div>
        }
    </div>

    <h4 class="mt-3">Filter ChipSet</h4>
 
        <MatChipSet Filter="true" @bind-SelectedChips="selectedChips">
            <MatChip Label="Wedges" IsCheckable="true"></MatChip>
            <MatChip Label="Fries" IsCheckable="true"></MatChip>
            <MatChip Label="Baby carrots" IsCheckable="true"></MatChip>
            <MatChip Label="Roasted veggies" IsCheckable="true"></MatChip>
            <MatChip Label="Salad" IsCheckable="true"></MatChip>
            <MatChip Label="Cheese" IsCheckable="true"></MatChip>
        </MatChipSet>
        <p>
            You selected:
            @foreach (var chip in selectedChips ?? new MatChip[0])
            {
                <span>@(chip.Label)&nbsp;</span>
            }
        </p>
</div>

<script>
    function saveMessage(productName) {
        alert(productName + " has been saved successfully.")
    }

    function setFocusOnElement(element){
        element.focus();
    }
</script>


@code {
   
            MatChip[] selectedChips = null;




    private Product product { get; set; }

    private List<CategoryEnum> categoryEnums { get; set; }

    ElementReference firstInputElement;

    private string succesMessage = "";

    protected override void OnInitialized()
    {
        product = new Product() { ProductName = "" };
        categoryEnums = Enum.GetValues(typeof(CategoryEnum)).Cast<CategoryEnum>().ToList();
    }

    private async Task SaveProduct()
    {
        string image = product.ProductName.Replace(" ", "%20");
        product.ImageUrl = $"https://placehold.co/150/?text={image}";


        var newProduct = await apiServices.PostAsync<Product>("zepto/Products", product);
        if (newProduct != null)
        {
            Console.WriteLine($"New Product Added with Product Id: {newProduct.Id}");
            succesMessage = $"Product Added Successfully Product Name: {product.ProductName}";
            // await JSRuntime.InvokeVoidAsync("saveMessage", product.ProductName);
            // StateHasChanged();
            product = new Product() { ProductName = "" };
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("setFocusOnElement", firstInputElement);
            await Task.Delay(5000);
            succesMessage = "";
            StateHasChanged();
        }
    }
}
