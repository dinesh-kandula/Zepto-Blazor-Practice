@page "/add-products"
@inject HttpClient Http
@inject BlazorApp2.Services.ApiServices apiServices
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@using ModelsClassLibrary.Models
@using ModelsClassLibrary.Models.Enums
@using System.ComponentModel


<PageTitle>Add Products</PageTitle>

<EditForm Model="@product" OnValidSubmit="@SaveProduct" class="pa-3">
    <DataAnnotationsValidator />
    <MudText Typo="Typo.h4" Color="Color.Dark" Align="Align.Center">Add Product</MudText>
    <div Class="d-flex justify-content-center align-items-center mt-3">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4 gap-1 flex-column d-flex" Elevation="19">
                <MudTextField @bind-Value="product.ProductName" For="@(() => product.ProductName)" Label="Product Name" Variant="Variant.Outlined"
                              Immediate="true" Margin="Margin.Dense" RequiredError="Product Name is required!" />

                <MudTextField @bind-Value="product.Description" For="@(() => product.Description)" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense" />

                <MudSelect T="CategoryEnum" Label="Category" @bind-Value="product.Category" For="@(() => product.Category)"
                           Variant="Variant.Outlined" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
                    @foreach (CategoryEnum category in categoryEnums!)
                    {
                        <MudSelectItem Value="@(category)">
                            @product.ConvertCategory(category.ToString())
                        </MudSelectItem>
                    }
                </MudSelect>

                <div class="d-flex gap-2">
                    <MudTextField @bind-Value="product.Quantity" For="@(() => product.Quantity)" Label="Quantity" Variant="Variant.Outlined" />
                    <MudSelect T="string" Label="Units" @bind-Value="Units" For="@(() => Units)" RequiredError="Select the Units" Required="true"
                               Variant="Variant.Outlined" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
                        <MudSelectItem Value="@("Kg")" />
                        <MudSelectItem Value="@("gm")" />
                        <MudSelectItem Value="@("L")" />
                        <MudSelectItem Value="@("ml")" />
                        <MudSelectItem Value="@("Dozen")" />
                        <MudSelectItem Value="@("Half Dozen")" />
                        <MudSelectItem Value="@("Unit")" />
                    </MudSelect>
                </div>

                <MudTextField @bind-Value="product.BasePrice" For="@(() => product.BasePrice)" Label="Base Price" InputType="InputType.Number" Variant="Variant.Outlined" Margin="Margin.Dense" />

                <MudTextField @bind-Value="product.Offer" For="@(() => product.Offer)" Label="Discount (%)" InputType="InputType.Number" Variant="Variant.Outlined" Margin="Margin.Dense" />

                <MudCardActions Class="ml-auto">
                    <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Class="m-1">Add</MudButton>
                    <MudButton ButtonType="MudBlazor.ButtonType.Reset" Variant="Variant.Outlined" Color="Color.Error" Class="m-1">Clear</MudButton>
                </MudCardActions>
            </MudPaper>
        </MudItem>
    </div>
</EditForm>


<script>
    function saveMessage(productName) {
        alert(productName + " has been saved successfully.")
    }

    function setFocusOnElement(element) {
        element.focus();
    }
</script>


@code {

    private Product product { get; set; }

    private List<CategoryEnum>? categoryEnums { get; set; }

    ElementReference firstInputElement;

    public required string Units { get; set; }

    protected override void OnInitialized()
    {
        product = new Product() { ProductName = "", Quantity = "" };
        categoryEnums = Enum.GetValues(typeof(CategoryEnum)).Cast<CategoryEnum>().ToList();
    }

    private async Task SaveProduct()
    {
        string image = product.ProductName.Replace(" ", "%20");
        product.ImageUrl = $"https://placehold.co/150/?text={image}";

        product.Quantity += " " + Units;

        var newProduct = await apiServices.PostAsync<Product>("zepto/Products", product);
        
        if (newProduct != null)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add($"Product Added Successfully Product Name: {product.ProductName}", Severity.Success, config =>
            {
                config.CloseAfterNavigation = true;
                config.VisibleStateDuration = 6000;
            });

            // await JSRuntime.InvokeVoidAsync("saveMessage", product.ProductName);
            // StateHasChanged();

            product = new Product() { ProductName = "", Quantity = "" };
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("setFocusOnElement", firstInputElement);
            await Task.Delay(5000);
            StateHasChanged();
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Add($"Error in Adding the Product", Severity.Error, config =>
            {
                config.CloseAfterNavigation = true;
                config.VisibleStateDuration = 10000;
            });
        }
    }
}
