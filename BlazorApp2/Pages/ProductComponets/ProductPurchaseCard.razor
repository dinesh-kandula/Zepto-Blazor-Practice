@using ModelsClassLibrary.Models

@if (product != null)
{
    <div class="card p-0 m-3" style="width: 13rem; border-radius:20px;">
        <div class="position-absolute btn btn-dark product-offer" style="color:#0dcaf0;">@product.GetOfferPercentage()</div>
        <img src="@product.ImageUrl" style="border-top-left-radius:20px; border-top-right-radius:20px;" class="card-img-top" alt="@product.ProductName">
        <div class="card-body d-flex flex-column justify-content-between">
            <h5 class="card-title">@product.ProductName</h5>
            <p class="link-info" 
                @onclick="() => CategoryEvent(product.Category)"
                style="cursor:pointer;"
                > @product.GetCategoryDisplayName()</p>
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <p class="fw-light my-0 text-decoration-line-through" style="font-size:14px;">₹@product.BasePrice</p>
                    <p class="fw-bold m-0 fs-5">@product.GetDiscountedPrice()</p>
                </div>
                <MudButton Variant="@Variant.Filled" class="mud-theme-info mud-elevation-4 rounded-l-xl" OnClick="() => addToCard(product)">Add</MudButton>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public ModelsClassLibrary.Models.Product? product { get; set; }

    [Parameter]
    public EventCallback<int> OnFilterCategory { get; set; }

    private async Task CategoryEvent(CategoryEnum data)
    {
        int categoryNumber = (int) data;
        await OnFilterCategory.InvokeAsync(categoryNumber);
    }

    private void addToCard(Product product)
    {
        Console.WriteLine($"Product name: {product.ProductName}, Base Price: {product.BasePrice}");
    }
}
